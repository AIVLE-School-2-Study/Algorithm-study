# 영양 점수란 어떠한 요리가 얼마나 영양면에서 완벽한지 알아보는 척도입니다.
# 어떠한 요리가 있을 때, 이 요리의 영양 점수는 맛이나 모양이 아닌 요리에 들어간 모든 식재료들에게서 발현되는 영양 점수의 합을 말합니다.
# 모든 식재료는 자기 자신으로는 영양 점수를 가질 수 없습니다.
# 모든 식재료는 두개 씩 재료가 서로 조합이 되었을 때 비로소 영양 점수가 발현됩니다.
# 예를 들어 식재료로 A, B, C, D가 있다고 했을 때 A와 B를 뽑아서 음식을 만든다면, A가 B랑 조합될 때의 A에서 발현 되는 영양 점수와 B가 A랑 조합될 때 B에서 발현 되는 영양 점수를 합한 것이 음식의 최종 영양 점수가 됩니다.
# 이는 (A, B) + (B, A)로 표현할 수 있습니다.
# 같은 이치로 식재료로 A, B, C, D, E, F,가 있다고 했을 때 A, B, C를 뽑아서 음식을 만든다면, (A, B) + (B, A) + (A, C) + (C, A) + (B, C) + (C, B)가 됩니다.
# 무조건 식재료는 두 개씩 서로 발현되는 것입니다.
# 주성이는 영양 점수에 대해 공부한 후 요리실습을 하려고 합니다.
# 주성이는 항상 두 가지 요리를 만들고 싶습니다.
# 이 때 두 요리의 영양 점수의 차이를 최소화하려고 합니다.
# 또한 현재 주성이가 가지고 있는 식재료의 개수가 N이라고 할 때, 각 요리당 N / 2가지의 식재료를 사용할 계획인데 요리마다 사용하는 식재료는 서로 다르게 할 생각입니다.
# 다시 말해 주성이는 가지고 있는 식재료를 정확히 반으로 나누어서 각 요리에 적용하려고 합니다.
# 따라서 주성이가 가지고 있는 식재료의 개수는 반드시 짝수로 주어집니다.
# 각각의 식재료들이 두 개씩 조합되었을 때 발현되는 영양 점수가 행렬 형태로 주어졌을 때 주성이가 생각한대로 요리를 할 수 있게 하는 프로그램을 작성해주세요.

# 예제 입력1
# 4
# 0 1 2 1
# 1 0 3 2
# 1 5 0 4
# 2 3 3 0

# 예제 출력1
# 2

# 예제 입력2
# 10
# 0 58 14 97 62 82 63 78 10 23
# 41 0 39 20 67 74 16 18 48 14
# 2 95 0 22 100 71 12 40 50 82
# 85 66 52 0 98 75 54 30 47 59
# 21 71 7 55 0 85 11 40 12 4
# 23 91 65 17 28 0 85 38 18 68
# 53 75 68 17 51 3 0 59 22 9
# 67 78 53 79 72 63 38 0 70 53
# 36 31 49 68 9 70 32 77 0 61
# 89 96 87 78 34 87 37 57 41 0

# 예제 출력2
# 1

# 입력값 설명
# 첫째 줄에 주성이가 현재 가지고 있는 식재료의 개수 N(4 ≤ N ≤ 20, N은 짝수)이 주어집니다.
# 둘째 줄부터 N개의 줄에 각 식재료에서 발현되는 영양 점수 S가 주어집니다.
# 이 때각 줄에는 N개의 수가 서로 공백을 두고 주어져 있고, i번 줄의 j번째 수는 Sij입니다.
# Sij는 i번째 식재료와 j번째 식재료를 조합했을 때 i번째 식재료에서 발현되는 영양 점수입니다.
# Sii는 항상 0이며 나머지 Sij는 1보다 크거나 같고 100보다 작거나 같은 정수입니다.

# 출력값 설명
# 첫째 줄에 두 요리의 영양 점수의 차이의 최솟값을 출력합니다.

import sys
import itertools

N = int(sys.stdin.readline())
S = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]

food = [x for x in range(N)]
food_combine = [list(x) for x in itertools.combinations(food, N // 2)]

food_score = []

for y in range(len(food_combine)):
    for z in range(y + 1, len(food_combine)):
        if len(list(set(food_combine[y]).intersection(food_combine[z]))) == 0:
            A = [list(a) for a in itertools.combinations(food_combine[y], 2)]
            B = [list(b) for b in itertools.combinations(food_combine[z], 2)]

            A_sum, B_sum = 0, 0

            for i in range(len(A)):
                A_sum += S[A[i][0]][A[i][1]] + S[A[i][1]][A[i][0]]
                B_sum += S[B[i][0]][B[i][1]] + S[B[i][1]][B[i][0]]

            food_score.append(abs(A_sum - B_sum))

print(min(food_score))