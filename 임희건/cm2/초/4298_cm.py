# 대학원생 창민이는 교수님이 자리를 비운 사이에 컴퓨터 게임을 하다가 적발되어 대학원 미로 감옥에 갇히게 되었습니다.
# 미로는 N x M 크기의 직사각형 형태를 가지고 있습니다.
# 미로에는 여러 개의 지뢰가 매복되어 있는데, 창민이는 지뢰를 밟지 않고 빠르게 출구로 나아가고자 합니다.
# 창민이의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한 번에 한 칸씩 이동할 수 있습니다.
# 이 때 지뢰인 부분은 0으로, 지뢰가 아닌 부분은 1로 표시가 되어있습니다.
# 미로는 반드시 탈출할 수 있는 형태로 제시됩니다.
# 이 때 창민이가 탈출하기 위해 이동해야 하는 최소 칸의 개수를 구하는 프로그램을 작성해주세요. 
# 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산합니다.

# 예제 입력1
# 5 5
# 10101
# 11111
# 00001
# 11111
# 11111

# 예제 출력1
# 9

# 예제 입력2
# 5 7
# 1111111
# 0000001
# 1111111
# 1000000
# 1111111

# 예제 출력2
# 23

# 입력값 설명
# 첫째 줄에 미로의 높이를 나타내는 정수 N과 미로의 너비를 나타내는 정수 M(2 ≤ N, M ≤ 10)이 공백으로 구분되어 주어집니다.
# 다음 N개의 줄에는 각 줄마다 M개의 정수가 공백으로 구분되지 않고 주어집니다.
# i번째 줄 j번째 정수가 0이라면 미로의 (i, j) 위치가 지뢰라는 의미이고 1이라면 그렇지 않다는 의미입니다.

# 출력값 설명
# 첫째 줄에 창민이가 미로를 탈출하기 위해 이동해야 할 최소 칸의 개수를 출력합니다.

import sys

def checking(n, m, c, cm = [], mz = []):
    while [n, m] not in cm:
        cm2 = []

        for i in cm:
            x = i[0]
            y = i[1]

            if x - 1 >= 0 and mz[x - 1][y] == '1':
                mz[x - 1][y] = '2'
                cm2.append([x - 1, y])

            if x + 1 <= n and mz[x + 1][y] == '1':
                mz[x + 1][y] = '2'
                cm2.append([x + 1, y])

            if y - 1 >= 0 and mz[x][y - 1] == '1':
                mz[x][y - 1] = '2'
                cm2.append([x, y - 1])

            if y + 1 <= m and mz[x][y + 1] == '1':
                mz[x][y + 1] = '2'
                cm2.append([x, y + 1])

        cm = cm2.copy()

        c += 1

    return c

N, M = map(int, sys.stdin.readline().split())
maze = [list(sys.stdin.readline().strip()) for _ in range(N)]
changmin = [[0, 0]]
count = 1

count = checking(N - 1, M - 1, count, changmin, maze)

print(count)